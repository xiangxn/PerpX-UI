// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: perpx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { grpc } from "@improbable-eng/grpc-web";
import { BrowserHeaders } from "browser-headers";
import Long from "long";

export const protobufPackage = "perpx";

export interface TelegramLoginRequest {
  /** Telegram 提供的 initData */
  initData: string;
}

export interface LoginResponse {
  /** JWT Token */
  token: string;
}

export interface ProfileRequest {
  /** JWT Token */
  token: string;
}

export interface ProfileResponse {
  telegramId: number;
  telegramName: string;
  maxStrategies: number;
  active: boolean;
  subscriptionStart?: string | undefined;
  subscriptionEnd?: string | undefined;
  email?: string | undefined;
  avatar?: string | undefined;
}

function createBaseTelegramLoginRequest(): TelegramLoginRequest {
  return { initData: "" };
}

export const TelegramLoginRequest: MessageFns<TelegramLoginRequest> = {
  encode(message: TelegramLoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.initData !== "") {
      writer.uint32(10).string(message.initData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TelegramLoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTelegramLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.initData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TelegramLoginRequest {
    return { initData: isSet(object.initData) ? globalThis.String(object.initData) : "" };
  },

  toJSON(message: TelegramLoginRequest): unknown {
    const obj: any = {};
    if (message.initData !== "") {
      obj.initData = message.initData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TelegramLoginRequest>, I>>(base?: I): TelegramLoginRequest {
    return TelegramLoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TelegramLoginRequest>, I>>(object: I): TelegramLoginRequest {
    const message = createBaseTelegramLoginRequest();
    message.initData = object.initData ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { token: "" };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(message: LoginResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResponse>, I>>(base?: I): LoginResponse {
    return LoginResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResponse>, I>>(object: I): LoginResponse {
    const message = createBaseLoginResponse();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseProfileRequest(): ProfileRequest {
  return { token: "" };
}

export const ProfileRequest: MessageFns<ProfileRequest> = {
  encode(message: ProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: ProfileRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileRequest>, I>>(base?: I): ProfileRequest {
    return ProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileRequest>, I>>(object: I): ProfileRequest {
    const message = createBaseProfileRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseProfileResponse(): ProfileResponse {
  return {
    telegramId: 0,
    telegramName: "",
    maxStrategies: 0,
    active: false,
    subscriptionStart: undefined,
    subscriptionEnd: undefined,
    email: undefined,
    avatar: undefined,
  };
}

export const ProfileResponse: MessageFns<ProfileResponse> = {
  encode(message: ProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.telegramId !== 0) {
      writer.uint32(8).int32(message.telegramId);
    }
    if (message.telegramName !== "") {
      writer.uint32(18).string(message.telegramName);
    }
    if (message.maxStrategies !== 0) {
      writer.uint32(24).int32(message.maxStrategies);
    }
    if (message.active !== false) {
      writer.uint32(32).bool(message.active);
    }
    if (message.subscriptionStart !== undefined) {
      writer.uint32(42).string(message.subscriptionStart);
    }
    if (message.subscriptionEnd !== undefined) {
      writer.uint32(50).string(message.subscriptionEnd);
    }
    if (message.email !== undefined) {
      writer.uint32(58).string(message.email);
    }
    if (message.avatar !== undefined) {
      writer.uint32(66).string(message.avatar);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.telegramId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.telegramName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxStrategies = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.subscriptionStart = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subscriptionEnd = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.avatar = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProfileResponse {
    return {
      telegramId: isSet(object.telegramId) ? globalThis.Number(object.telegramId) : 0,
      telegramName: isSet(object.telegramName) ? globalThis.String(object.telegramName) : "",
      maxStrategies: isSet(object.maxStrategies) ? globalThis.Number(object.maxStrategies) : 0,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
      subscriptionStart: isSet(object.subscriptionStart) ? globalThis.String(object.subscriptionStart) : undefined,
      subscriptionEnd: isSet(object.subscriptionEnd) ? globalThis.String(object.subscriptionEnd) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      avatar: isSet(object.avatar) ? globalThis.String(object.avatar) : undefined,
    };
  },

  toJSON(message: ProfileResponse): unknown {
    const obj: any = {};
    if (message.telegramId !== 0) {
      obj.telegramId = Math.round(message.telegramId);
    }
    if (message.telegramName !== "") {
      obj.telegramName = message.telegramName;
    }
    if (message.maxStrategies !== 0) {
      obj.maxStrategies = Math.round(message.maxStrategies);
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    if (message.subscriptionStart !== undefined) {
      obj.subscriptionStart = message.subscriptionStart;
    }
    if (message.subscriptionEnd !== undefined) {
      obj.subscriptionEnd = message.subscriptionEnd;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.avatar !== undefined) {
      obj.avatar = message.avatar;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProfileResponse>, I>>(base?: I): ProfileResponse {
    return ProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProfileResponse>, I>>(object: I): ProfileResponse {
    const message = createBaseProfileResponse();
    message.telegramId = object.telegramId ?? 0;
    message.telegramName = object.telegramName ?? "";
    message.maxStrategies = object.maxStrategies ?? 0;
    message.active = object.active ?? false;
    message.subscriptionStart = object.subscriptionStart ?? undefined;
    message.subscriptionEnd = object.subscriptionEnd ?? undefined;
    message.email = object.email ?? undefined;
    message.avatar = object.avatar ?? undefined;
    return message;
  },
};

export interface PerpxService {
  loginWithTelegram(request: DeepPartial<TelegramLoginRequest>, metadata?: grpc.Metadata): Promise<LoginResponse>;
  getProfile(request: DeepPartial<ProfileRequest>, metadata?: grpc.Metadata): Promise<ProfileResponse>;
}

export class PerpxServiceClientImpl implements PerpxService {
  private readonly rpc: Rpc;

  constructor(rpc: Rpc) {
    this.rpc = rpc;
    this.loginWithTelegram = this.loginWithTelegram.bind(this);
    this.getProfile = this.getProfile.bind(this);
  }

  loginWithTelegram(request: DeepPartial<TelegramLoginRequest>, metadata?: grpc.Metadata): Promise<LoginResponse> {
    return this.rpc.unary(PerpxServiceloginWithTelegramDesc, TelegramLoginRequest.fromPartial(request), metadata);
  }

  getProfile(request: DeepPartial<ProfileRequest>, metadata?: grpc.Metadata): Promise<ProfileResponse> {
    return this.rpc.unary(PerpxServicegetProfileDesc, ProfileRequest.fromPartial(request), metadata);
  }
}

export const PerpxServiceDesc = { serviceName: "perpx.PerpxService" };

export const PerpxServiceloginWithTelegramDesc: UnaryMethodDefinitionish = {
  methodName: "loginWithTelegram",
  service: PerpxServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return TelegramLoginRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = LoginResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

export const PerpxServicegetProfileDesc: UnaryMethodDefinitionish = {
  methodName: "getProfile",
  service: PerpxServiceDesc,
  requestStream: false,
  responseStream: false,
  requestType: {
    serializeBinary() {
      return ProfileRequest.encode(this).finish();
    },
  } as any,
  responseType: {
    deserializeBinary(data: Uint8Array) {
      const value = ProfileResponse.decode(data);
      return {
        ...value,
        toObject() {
          return value;
        },
      };
    },
  } as any,
};

interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
  requestStream: any;
  responseStream: any;
}

type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;

interface Rpc {
  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any>;
}

export class GrpcWebImpl {
  private host: string;
  private options: {
    transport?: grpc.TransportFactory;

    debug?: boolean;
    metadata?: grpc.Metadata;
    upStreamRetryCodes?: number[];
  };

  constructor(
    host: string,
    options: {
      transport?: grpc.TransportFactory;

      debug?: boolean;
      metadata?: grpc.Metadata;
      upStreamRetryCodes?: number[];
    },
  ) {
    this.host = host;
    this.options = options;
  }

  unary<T extends UnaryMethodDefinitionish>(
    methodDesc: T,
    _request: any,
    metadata: grpc.Metadata | undefined,
  ): Promise<any> {
    const request = { ..._request, ...methodDesc.requestType };
    const maybeCombinedMetadata = metadata && this.options.metadata
      ? new BrowserHeaders({ ...this.options?.metadata.headersMap, ...metadata?.headersMap })
      : metadata ?? this.options.metadata;
    return new Promise((resolve, reject) => {
      grpc.unary(methodDesc, {
        request,
        host: this.host,
        metadata: maybeCombinedMetadata ?? {},
        ...(this.options.transport !== undefined ? { transport: this.options.transport } : {}),
        debug: this.options.debug ?? false,
        onEnd: function (response) {
          if (response.status === grpc.Code.OK) {
            resolve(response.message!.toObject());
          } else {
            const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
            reject(err);
          }
        },
      });
    });
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export class GrpcWebError extends globalThis.Error {
  constructor(message: string, public code: grpc.Code, public metadata: grpc.Metadata) {
    super(message);
  }
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
